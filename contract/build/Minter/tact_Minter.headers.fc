;;
;; Header files for Minter
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $MintTarget$_store
builder $MintTarget$_store(builder build_0, (int, slice, int, int, slice) v) inline;

;; $MintTarget$_store_cell
cell $MintTarget$_store_cell((int, slice, int, int, slice) v) inline;

;; $MintTarget$_load
(slice, ((int, slice, int, int, slice))) $MintTarget$_load(slice sc_0) inline;

;; $Minter$_store
builder $Minter$_store(builder build_0, (int, int) v) inline;

;; $Minter$_load
(slice, ((int, int))) $Minter$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $Safe$init$_store
builder $Safe$init$_store(builder build_0, (slice, slice, int) v) inline;

;; $Minter$init$_load
(slice, ((int))) $Minter$init$_load(slice sc_0) inline;

;; $Minter$_contract_init
(int, int) $Minter$_contract_init(int $id) impure inline_ref;

;; $Minter$_contract_load
(int, int) $Minter$_contract_load() impure inline_ref;

;; $Minter$_contract_store
() $Minter$_contract_store((int, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Safe$_init_child
(cell, cell) $Safe$_init_child(cell sys', slice $owner, slice $parent, int $id) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Minter$_fun_get_contract_state_init
((int, int), (cell, cell)) $Minter$_fun_get_contract_state_init((int, int) $self, slice $owner, int $seqno) impure inline_ref;

;; $Minter$_fun_get_address_contract
((int, int), slice) $Minter$_fun_get_address_contract((int, int) $self, slice $owner, int $seqno) impure inline_ref;

;; $Minter$_fun_get_seqno
((int, int), int) $Minter$_fun_get_seqno((int, int) $self) impure inline_ref;

;; $Minter$_fun_get_id
((int, int), int) $Minter$_fun_get_id((int, int) $self) impure inline_ref;

;; $Minter$_fun_forward
((int, int), ()) $Minter$_fun_forward((int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Minter$_fun_notify
((int, int), ()) $Minter$_fun_notify((int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline;

;; $MintTarget$_constructor_query_id_name_amount_deadline_image
((int, slice, int, int, slice)) $MintTarget$_constructor_query_id_name_amount_deadline_image(int query_id, slice name, int amount, int deadline, slice image) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
