#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Minter.headers.fc";
#include "tact_Minter.stdlib.fc";
#include "tact_Minter.storage.fc";

;;
;; Contract Minter functions
;;

(int, int) $Minter$_contract_init(int $id) impure inline_ref {
    var (($self'seqno, $self'id)) = (null(), null());
    $self'seqno = 0;
    $self'id = $id;
    return ($self'seqno, $self'id);
}

((int, int), (cell, cell)) $Minter$_fun_get_contract_state_init((int, int) $self, slice $owner, int $seqno) impure inline_ref {
    var (($self'seqno, $self'id)) = $self;
    return (($self'seqno, $self'id), $Safe$_init_child(__tact_context_sys, $owner, my_address(), $seqno));
}

((int, int), slice) $Minter$_fun_get_address_contract((int, int) $self, slice $owner, int $seqno) impure inline_ref {
    var (($self'seqno, $self'id)) = $self;
    var ($contractInit'code, $contractInit'data) = ($self'seqno, $self'id)~$Minter$_fun_get_contract_state_init($owner, $seqno);
    return (($self'seqno, $self'id), $global_contractAddress(($contractInit'code, $contractInit'data)));
}

((int, int), int) $Minter$_fun_get_seqno((int, int) $self) impure inline_ref {
    var (($self'seqno, $self'id)) = $self;
    return (($self'seqno, $self'id), $self'seqno);
}

((int, int), int) $Minter$_fun_get_id((int, int) $self) impure inline_ref {
    var (($self'seqno, $self'id)) = $self;
    return (($self'seqno, $self'id), $self'id);
}

;;
;; Receivers of a Contract Minter
;;

(((int, int)), ()) %$Minter$_internal_empty((int, int) $self) impure inline {
    var ($self'seqno, $self'id) = $self;
    return (($self'seqno, $self'id), ());
}

(((int, int)), ()) $Minter$_internal_binary_MintTarget((int, int) $self, (int, slice, int, int, slice) $msg) impure inline {
    var ($self'seqno, $self'id) = $self;
    var ($msg'query_id, $msg'name, $msg'amount, $msg'deadline, $msg'image) = $msg;
    slice $owner = __tact_context_get_sender();
    var ($contractInit'code, $contractInit'data) = ($self'seqno, $self'id)~$Minter$_fun_get_contract_state_init($owner, $self'seqno);
    slice $contractAddress = $global_contractAddress(($contractInit'code, $contractInit'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($contractAddress, 0, (64 + 2), true, $MintTarget$_store_cell($MintTarget$_constructor_query_id_name_amount_deadline_image($msg'query_id, $msg'name, $msg'amount, $msg'deadline, $msg'image)), $contractInit'code, $contractInit'data));
    $self'seqno = ($self'seqno + 1);
    return (($self'seqno, $self'id), ());
}

(((int, int)), ()) $Minter$_internal_binary_Deploy((int, int) $self, (int) $deploy) impure inline {
    var ($self'seqno, $self'id) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'seqno, $self'id)~$Minter$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'seqno, $self'id), ());
}

;;
;; Get methods of a Contract Minter
;;

_ %get_address_contract(slice $$owner, int $$seqno) method_id(95530) {
    slice $owner = __tact_verify_address($$owner);
    int $seqno = $$seqno;
    var self = $Minter$_contract_load();
    var res = self~$Minter$_fun_get_address_contract($owner, $seqno);
    return res;
}

_ %get_contract_state_init(slice $$owner, int $$seqno) method_id(80402) {
    slice $owner = __tact_verify_address($$owner);
    int $seqno = $$seqno;
    var self = $Minter$_contract_load();
    var res = self~$Minter$_fun_get_contract_state_init($owner, $seqno);
    return $StateInit$_to_external(res);
}

_ %get_seqno() method_id(77871) {
    var self = $Minter$_contract_load();
    var res = self~$Minter$_fun_get_seqno();
    return res;
}

_ %get_id() method_id(117305) {
    var self = $Minter$_contract_load();
    var res = self~$Minter$_fun_get_id();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmW3XM6BAVfL48CkSbAoP4sVDoBuDbGnuVyWpZF1XbSXbg";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Minter
;;

((int, int), int) $Minter$_contract_router_internal((int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Minter$_internal_empty();
        return (self, true);
    }
    
    ;; Receive MintTarget message
    if (op == 2335315874) {
        var msg = in_msg~$MintTarget$_load();
        self~$Minter$_internal_binary_MintTarget(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Minter$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Minter$_contract_load();
    
    ;; Handle operation
    int handled = self~$Minter$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Minter$_contract_store(self);
}
